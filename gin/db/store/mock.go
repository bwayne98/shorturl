// Code generated by MockGen. DO NOT EDIT.
// Source: shorturl/m/db/store (interfaces: Querier)

// Package store is a generated GoMock package.
package store

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// CountMatchShorturl mocks base method.
func (m *MockQuerier) CountMatchShorturl(arg0 context.Context, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountMatchShorturl", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountMatchShorturl indicates an expected call of CountMatchShorturl.
func (mr *MockQuerierMockRecorder) CountMatchShorturl(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountMatchShorturl", reflect.TypeOf((*MockQuerier)(nil).CountMatchShorturl), arg0, arg1)
}

// CreateShorturl mocks base method.
func (m *MockQuerier) CreateShorturl(arg0 context.Context, arg1 CreateShorturlParams) (Shorturl, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShorturl", arg0, arg1)
	ret0, _ := ret[0].(Shorturl)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateShorturl indicates an expected call of CreateShorturl.
func (mr *MockQuerierMockRecorder) CreateShorturl(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShorturl", reflect.TypeOf((*MockQuerier)(nil).CreateShorturl), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockQuerier) CreateUser(arg0 context.Context, arg1 CreateUserParams) (User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockQuerierMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockQuerier)(nil).CreateUser), arg0, arg1)
}

// DeleteShorturl mocks base method.
func (m *MockQuerier) DeleteShorturl(arg0 context.Context, arg1 DeleteShorturlParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteShorturl", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteShorturl indicates an expected call of DeleteShorturl.
func (mr *MockQuerierMockRecorder) DeleteShorturl(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteShorturl", reflect.TypeOf((*MockQuerier)(nil).DeleteShorturl), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockQuerier) DeleteUser(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockQuerierMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockQuerier)(nil).DeleteUser), arg0, arg1)
}

// GetMatchShorturl mocks base method.
func (m *MockQuerier) GetMatchShorturl(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatchShorturl", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMatchShorturl indicates an expected call of GetMatchShorturl.
func (mr *MockQuerierMockRecorder) GetMatchShorturl(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatchShorturl", reflect.TypeOf((*MockQuerier)(nil).GetMatchShorturl), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockQuerier) GetUser(arg0 context.Context, arg1 string) (GetUserRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(GetUserRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockQuerierMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockQuerier)(nil).GetUser), arg0, arg1)
}

// ListUserShorturl mocks base method.
func (m *MockQuerier) ListUserShorturl(arg0 context.Context, arg1 int32) ([]ListUserShorturlRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserShorturl", arg0, arg1)
	ret0, _ := ret[0].([]ListUserShorturlRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserShorturl indicates an expected call of ListUserShorturl.
func (mr *MockQuerierMockRecorder) ListUserShorturl(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserShorturl", reflect.TypeOf((*MockQuerier)(nil).ListUserShorturl), arg0, arg1)
}

// UpdateExpired mocks base method.
func (m *MockQuerier) UpdateExpired(arg0 context.Context, arg1 UpdateExpiredParams) (Shorturl, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExpired", arg0, arg1)
	ret0, _ := ret[0].(Shorturl)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateExpired indicates an expected call of UpdateExpired.
func (mr *MockQuerierMockRecorder) UpdateExpired(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExpired", reflect.TypeOf((*MockQuerier)(nil).UpdateExpired), arg0, arg1)
}
