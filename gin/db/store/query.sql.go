// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: query.sql

package store

import (
	"context"
	"time"
)

const countMatchShorturl = `-- name: CountMatchShorturl :one
SELECT COUNT(id) FROM shorturls WHERE match = $1
`

func (q *Queries) CountMatchShorturl(ctx context.Context, match string) (int64, error) {
	row := q.db.QueryRowContext(ctx, countMatchShorturl, match)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createShorturl = `-- name: CreateShorturl :one
INSERT INTO shorturls (
  origin, match, user_id, expired_at
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, user_id, origin, match, expired_at, updated_at, created_at
`

type CreateShorturlParams struct {
	Origin    string    `json:"origin"`
	Match     string    `json:"match"`
	UserID    int32     `json:"user_id"`
	ExpiredAt time.Time `json:"expired_at"`
}

func (q *Queries) CreateShorturl(ctx context.Context, arg CreateShorturlParams) (Shorturl, error) {
	row := q.db.QueryRowContext(ctx, createShorturl,
		arg.Origin,
		arg.Match,
		arg.UserID,
		arg.ExpiredAt,
	)
	var i Shorturl
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Origin,
		&i.Match,
		&i.ExpiredAt,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users(
  name, line_id
 ) VALUES (
  $1, $2
 )
 RETURNING id, name, line_id, created_at
`

type CreateUserParams struct {
	Name   string `json:"name"`
	LineID string `json:"line_id"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Name, arg.LineID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.LineID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteShorturl = `-- name: DeleteShorturl :exec
DELETE FROM shorturls 
WHERE id = $1 
AND user_id = $2
`

type DeleteShorturlParams struct {
	ID     int32 `json:"id"`
	UserID int32 `json:"user_id"`
}

func (q *Queries) DeleteShorturl(ctx context.Context, arg DeleteShorturlParams) error {
	_, err := q.db.ExecContext(ctx, deleteShorturl, arg.ID, arg.UserID)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
 DELETE FROM users
 WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getMatchShorturl = `-- name: GetMatchShorturl :one
SELECT origin FROM shorturls 
WHERE match = $1 AND expired_at > (now()) 
ORDER BY id LIMIT 1
`

func (q *Queries) GetMatchShorturl(ctx context.Context, match string) (string, error) {
	row := q.db.QueryRowContext(ctx, getMatchShorturl, match)
	var origin string
	err := row.Scan(&origin)
	return origin, err
}

const getUser = `-- name: GetUser :one
 SELECT id, name
 FROM users
 WHERE line_id = $1
`

type GetUserRow struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) GetUser(ctx context.Context, lineID string) (GetUserRow, error) {
	row := q.db.QueryRowContext(ctx, getUser, lineID)
	var i GetUserRow
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listUserShorturl = `-- name: ListUserShorturl :many
SELECT id, origin, match, user_id, expired_at, created_at
FROM shorturls
WHERE user_id = $1
`

type ListUserShorturlRow struct {
	ID        int32     `json:"id"`
	Origin    string    `json:"origin"`
	Match     string    `json:"match"`
	UserID    int32     `json:"user_id"`
	ExpiredAt time.Time `json:"expired_at"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) ListUserShorturl(ctx context.Context, userID int32) ([]ListUserShorturlRow, error) {
	rows, err := q.db.QueryContext(ctx, listUserShorturl, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListUserShorturlRow{}
	for rows.Next() {
		var i ListUserShorturlRow
		if err := rows.Scan(
			&i.ID,
			&i.Origin,
			&i.Match,
			&i.UserID,
			&i.ExpiredAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateExpired = `-- name: UpdateExpired :one
UPDATE shorturls 
SET expired_at = $2 
WHERE id = $1 
RETURNING id, user_id, origin, match, expired_at, updated_at, created_at
`

type UpdateExpiredParams struct {
	ID        int32     `json:"id"`
	ExpiredAt time.Time `json:"expired_at"`
}

func (q *Queries) UpdateExpired(ctx context.Context, arg UpdateExpiredParams) (Shorturl, error) {
	row := q.db.QueryRowContext(ctx, updateExpired, arg.ID, arg.ExpiredAt)
	var i Shorturl
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Origin,
		&i.Match,
		&i.ExpiredAt,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}
